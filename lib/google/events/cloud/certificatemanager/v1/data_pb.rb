# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/events/cloud/certificatemanager/v1/data.proto

require 'google/protobuf'

require 'google/protobuf/duration_pb'
require 'google/protobuf/timestamp_pb'

Google::Protobuf::DescriptorPool.generated_pool.build do
  add_file("google/events/cloud/certificatemanager/v1/data.proto", :syntax => :proto3) do
    add_message "google.events.cloud.certificatemanager.v1.CertificateIssuanceConfig" do
      optional :name, :string, 1
      optional :create_time, :message, 2, "google.protobuf.Timestamp"
      optional :update_time, :message, 3, "google.protobuf.Timestamp"
      map :labels, :string, :string, 4
      optional :description, :string, 5
      optional :certificate_authority_config, :message, 6, "google.events.cloud.certificatemanager.v1.CertificateIssuanceConfig.CertificateAuthorityConfig"
      optional :lifetime, :message, 7, "google.protobuf.Duration"
      optional :rotation_window_percentage, :int32, 8
      optional :key_algorithm, :enum, 9, "google.events.cloud.certificatemanager.v1.CertificateIssuanceConfig.KeyAlgorithm"
    end
    add_message "google.events.cloud.certificatemanager.v1.CertificateIssuanceConfig.CertificateAuthorityConfig" do
      oneof :kind do
        optional :certificate_authority_service_config, :message, 1, "google.events.cloud.certificatemanager.v1.CertificateIssuanceConfig.CertificateAuthorityConfig.CertificateAuthorityServiceConfig"
      end
    end
    add_message "google.events.cloud.certificatemanager.v1.CertificateIssuanceConfig.CertificateAuthorityConfig.CertificateAuthorityServiceConfig" do
      optional :ca_pool, :string, 1
    end
    add_enum "google.events.cloud.certificatemanager.v1.CertificateIssuanceConfig.KeyAlgorithm" do
      value :KEY_ALGORITHM_UNSPECIFIED, 0
      value :RSA_2048, 1
      value :ECDSA_P256, 4
    end
    add_message "google.events.cloud.certificatemanager.v1.Certificate" do
      optional :name, :string, 1
      optional :description, :string, 8
      optional :create_time, :message, 2, "google.protobuf.Timestamp"
      optional :update_time, :message, 3, "google.protobuf.Timestamp"
      map :labels, :string, :string, 4
      repeated :san_dnsnames, :string, 6
      optional :pem_certificate, :string, 9
      optional :expire_time, :message, 7, "google.protobuf.Timestamp"
      optional :scope, :enum, 12, "google.events.cloud.certificatemanager.v1.Certificate.Scope"
      oneof :type do
        optional :self_managed, :message, 5, "google.events.cloud.certificatemanager.v1.Certificate.SelfManagedCertificate"
        optional :managed, :message, 11, "google.events.cloud.certificatemanager.v1.Certificate.ManagedCertificate"
      end
    end
    add_message "google.events.cloud.certificatemanager.v1.Certificate.SelfManagedCertificate" do
    end
    add_message "google.events.cloud.certificatemanager.v1.Certificate.ManagedCertificate" do
      repeated :domains, :string, 1
      repeated :dns_authorizations, :string, 2
      optional :issuance_config, :string, 6
      optional :state, :enum, 4, "google.events.cloud.certificatemanager.v1.Certificate.ManagedCertificate.State"
      optional :provisioning_issue, :message, 3, "google.events.cloud.certificatemanager.v1.Certificate.ManagedCertificate.ProvisioningIssue"
      repeated :authorization_attempt_info, :message, 5, "google.events.cloud.certificatemanager.v1.Certificate.ManagedCertificate.AuthorizationAttemptInfo"
    end
    add_message "google.events.cloud.certificatemanager.v1.Certificate.ManagedCertificate.ProvisioningIssue" do
      optional :reason, :enum, 1, "google.events.cloud.certificatemanager.v1.Certificate.ManagedCertificate.ProvisioningIssue.Reason"
      optional :details, :string, 2
    end
    add_enum "google.events.cloud.certificatemanager.v1.Certificate.ManagedCertificate.ProvisioningIssue.Reason" do
      value :REASON_UNSPECIFIED, 0
      value :AUTHORIZATION_ISSUE, 1
      value :RATE_LIMITED, 2
    end
    add_message "google.events.cloud.certificatemanager.v1.Certificate.ManagedCertificate.AuthorizationAttemptInfo" do
      optional :domain, :string, 1
      optional :state, :enum, 2, "google.events.cloud.certificatemanager.v1.Certificate.ManagedCertificate.AuthorizationAttemptInfo.State"
      optional :failure_reason, :enum, 3, "google.events.cloud.certificatemanager.v1.Certificate.ManagedCertificate.AuthorizationAttemptInfo.FailureReason"
      optional :details, :string, 4
    end
    add_enum "google.events.cloud.certificatemanager.v1.Certificate.ManagedCertificate.AuthorizationAttemptInfo.State" do
      value :STATE_UNSPECIFIED, 0
      value :AUTHORIZING, 1
      value :AUTHORIZED, 6
      value :FAILED, 7
    end
    add_enum "google.events.cloud.certificatemanager.v1.Certificate.ManagedCertificate.AuthorizationAttemptInfo.FailureReason" do
      value :FAILURE_REASON_UNSPECIFIED, 0
      value :CONFIG, 1
      value :CAA, 2
      value :RATE_LIMITED, 3
    end
    add_enum "google.events.cloud.certificatemanager.v1.Certificate.ManagedCertificate.State" do
      value :STATE_UNSPECIFIED, 0
      value :PROVISIONING, 1
      value :FAILED, 2
      value :ACTIVE, 3
    end
    add_enum "google.events.cloud.certificatemanager.v1.Certificate.Scope" do
      value :DEFAULT, 0
      value :EDGE_CACHE, 1
    end
    add_message "google.events.cloud.certificatemanager.v1.CertificateMap" do
      optional :name, :string, 1
      optional :description, :string, 5
      optional :create_time, :message, 2, "google.protobuf.Timestamp"
      optional :update_time, :message, 6, "google.protobuf.Timestamp"
      map :labels, :string, :string, 3
      repeated :gclb_targets, :message, 4, "google.events.cloud.certificatemanager.v1.CertificateMap.GclbTarget"
    end
    add_message "google.events.cloud.certificatemanager.v1.CertificateMap.GclbTarget" do
      repeated :ip_configs, :message, 2, "google.events.cloud.certificatemanager.v1.CertificateMap.GclbTarget.IpConfig"
      oneof :target_proxy do
        optional :target_https_proxy, :string, 1
        optional :target_ssl_proxy, :string, 3
      end
    end
    add_message "google.events.cloud.certificatemanager.v1.CertificateMap.GclbTarget.IpConfig" do
      optional :ip_address, :string, 1
      repeated :ports, :uint32, 3
    end
    add_message "google.events.cloud.certificatemanager.v1.CertificateMapEntry" do
      optional :name, :string, 1
      optional :description, :string, 9
      optional :create_time, :message, 2, "google.protobuf.Timestamp"
      optional :update_time, :message, 3, "google.protobuf.Timestamp"
      map :labels, :string, :string, 4
      repeated :certificates, :string, 7
      optional :state, :enum, 8, "google.events.cloud.certificatemanager.v1.ServingState"
      oneof :match do
        optional :hostname, :string, 5
        optional :matcher, :enum, 10, "google.events.cloud.certificatemanager.v1.CertificateMapEntry.Matcher"
      end
    end
    add_enum "google.events.cloud.certificatemanager.v1.CertificateMapEntry.Matcher" do
      value :MATCHER_UNSPECIFIED, 0
      value :PRIMARY, 1
    end
    add_message "google.events.cloud.certificatemanager.v1.DnsAuthorization" do
      optional :name, :string, 1
      optional :create_time, :message, 2, "google.protobuf.Timestamp"
      optional :update_time, :message, 3, "google.protobuf.Timestamp"
      map :labels, :string, :string, 4
      optional :description, :string, 5
      optional :domain, :string, 6
      optional :dns_resource_record, :message, 10, "google.events.cloud.certificatemanager.v1.DnsAuthorization.DnsResourceRecord"
    end
    add_message "google.events.cloud.certificatemanager.v1.DnsAuthorization.DnsResourceRecord" do
      optional :name, :string, 1
      optional :type, :string, 2
      optional :data, :string, 3
    end
    add_message "google.events.cloud.certificatemanager.v1.DnsAuthorizationEventData" do
      proto3_optional :payload, :message, 1, "google.events.cloud.certificatemanager.v1.DnsAuthorization"
    end
    add_message "google.events.cloud.certificatemanager.v1.CertificateIssuanceConfigEventData" do
      proto3_optional :payload, :message, 1, "google.events.cloud.certificatemanager.v1.CertificateIssuanceConfig"
    end
    add_message "google.events.cloud.certificatemanager.v1.CertificateMapEntryEventData" do
      proto3_optional :payload, :message, 1, "google.events.cloud.certificatemanager.v1.CertificateMapEntry"
    end
    add_message "google.events.cloud.certificatemanager.v1.CertificateMapEventData" do
      proto3_optional :payload, :message, 1, "google.events.cloud.certificatemanager.v1.CertificateMap"
    end
    add_message "google.events.cloud.certificatemanager.v1.CertificateEventData" do
      proto3_optional :payload, :message, 1, "google.events.cloud.certificatemanager.v1.Certificate"
    end
    add_enum "google.events.cloud.certificatemanager.v1.ServingState" do
      value :SERVING_STATE_UNSPECIFIED, 0
      value :ACTIVE, 1
      value :PENDING, 2
    end
  end
end

module Google
  module Events
    module Cloud
      module CertificateManager
        module V1
          CertificateIssuanceConfig = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.events.cloud.certificatemanager.v1.CertificateIssuanceConfig").msgclass
          CertificateIssuanceConfig::CertificateAuthorityConfig = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.events.cloud.certificatemanager.v1.CertificateIssuanceConfig.CertificateAuthorityConfig").msgclass
          CertificateIssuanceConfig::CertificateAuthorityConfig::CertificateAuthorityServiceConfig = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.events.cloud.certificatemanager.v1.CertificateIssuanceConfig.CertificateAuthorityConfig.CertificateAuthorityServiceConfig").msgclass
          CertificateIssuanceConfig::KeyAlgorithm = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.events.cloud.certificatemanager.v1.CertificateIssuanceConfig.KeyAlgorithm").enummodule
          Certificate = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.events.cloud.certificatemanager.v1.Certificate").msgclass
          Certificate::SelfManagedCertificate = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.events.cloud.certificatemanager.v1.Certificate.SelfManagedCertificate").msgclass
          Certificate::ManagedCertificate = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.events.cloud.certificatemanager.v1.Certificate.ManagedCertificate").msgclass
          Certificate::ManagedCertificate::ProvisioningIssue = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.events.cloud.certificatemanager.v1.Certificate.ManagedCertificate.ProvisioningIssue").msgclass
          Certificate::ManagedCertificate::ProvisioningIssue::Reason = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.events.cloud.certificatemanager.v1.Certificate.ManagedCertificate.ProvisioningIssue.Reason").enummodule
          Certificate::ManagedCertificate::AuthorizationAttemptInfo = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.events.cloud.certificatemanager.v1.Certificate.ManagedCertificate.AuthorizationAttemptInfo").msgclass
          Certificate::ManagedCertificate::AuthorizationAttemptInfo::State = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.events.cloud.certificatemanager.v1.Certificate.ManagedCertificate.AuthorizationAttemptInfo.State").enummodule
          Certificate::ManagedCertificate::AuthorizationAttemptInfo::FailureReason = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.events.cloud.certificatemanager.v1.Certificate.ManagedCertificate.AuthorizationAttemptInfo.FailureReason").enummodule
          Certificate::ManagedCertificate::State = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.events.cloud.certificatemanager.v1.Certificate.ManagedCertificate.State").enummodule
          Certificate::Scope = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.events.cloud.certificatemanager.v1.Certificate.Scope").enummodule
          CertificateMap = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.events.cloud.certificatemanager.v1.CertificateMap").msgclass
          CertificateMap::GclbTarget = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.events.cloud.certificatemanager.v1.CertificateMap.GclbTarget").msgclass
          CertificateMap::GclbTarget::IpConfig = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.events.cloud.certificatemanager.v1.CertificateMap.GclbTarget.IpConfig").msgclass
          CertificateMapEntry = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.events.cloud.certificatemanager.v1.CertificateMapEntry").msgclass
          CertificateMapEntry::Matcher = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.events.cloud.certificatemanager.v1.CertificateMapEntry.Matcher").enummodule
          DnsAuthorization = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.events.cloud.certificatemanager.v1.DnsAuthorization").msgclass
          DnsAuthorization::DnsResourceRecord = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.events.cloud.certificatemanager.v1.DnsAuthorization.DnsResourceRecord").msgclass
          DnsAuthorizationEventData = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.events.cloud.certificatemanager.v1.DnsAuthorizationEventData").msgclass
          CertificateIssuanceConfigEventData = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.events.cloud.certificatemanager.v1.CertificateIssuanceConfigEventData").msgclass
          CertificateMapEntryEventData = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.events.cloud.certificatemanager.v1.CertificateMapEntryEventData").msgclass
          CertificateMapEventData = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.events.cloud.certificatemanager.v1.CertificateMapEventData").msgclass
          CertificateEventData = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.events.cloud.certificatemanager.v1.CertificateEventData").msgclass
          ServingState = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("google.events.cloud.certificatemanager.v1.ServingState").enummodule
        end
      end
    end
  end
end
